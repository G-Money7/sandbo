"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BLOCK_BINDINGS_ALLOWED_BLOCKS = void 0;
var _react = require("react");
var _blocks = require("@wordpress/blocks");
var _compose = require("@wordpress/compose");
var _data = require("@wordpress/data");
var _hooks = require("@wordpress/hooks");
var _store = require("../store");
var _context = require("../components/block-edit/context");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/** @typedef {import('@wordpress/compose').WPHigherOrderComponent} WPHigherOrderComponent */
/** @typedef {import('@wordpress/blocks').WPBlockSettings} WPBlockSettings */

/**
 * Given a binding of block attributes, returns a higher order component that
 * overrides its `attributes` and `setAttributes` props to sync any changes needed.
 *
 * @return {WPHigherOrderComponent} Higher-order component.
 */

const BLOCK_BINDINGS_ALLOWED_BLOCKS = exports.BLOCK_BINDINGS_ALLOWED_BLOCKS = {
  'core/paragraph': ['content'],
  'core/heading': ['content'],
  'core/image': ['url', 'title', 'alt'],
  'core/button': ['url', 'text', 'linkTarget']
};
const createEditFunctionWithBindingsAttribute = () => (0, _compose.createHigherOrderComponent)(BlockEdit => props => {
  const {
    clientId,
    name: blockName
  } = (0, _context.useBlockEditContext)();
  const {
    getBlockBindingsSource
  } = (0, _lockUnlock.unlock)((0, _data.useSelect)(_store.store));
  const {
    getBlockAttributes
  } = (0, _data.useSelect)(_store.store);
  const updatedAttributes = getBlockAttributes(clientId);
  if (updatedAttributes?.metadata?.bindings) {
    Object.entries(updatedAttributes.metadata.bindings).forEach(([attributeName, settings]) => {
      const source = getBlockBindingsSource(settings.source);
      if (source && source.useSource) {
        // Second argument (`updateMetaValue`) will be used to update the value in the future.
        const {
          placeholder,
          useValue: [metaValue = null] = []
        } = source.useSource(props, settings.args);
        if (placeholder && !metaValue) {
          // If the attribute is `src` or `href`, a placeholder can't be used because it is not a valid url.
          // Adding this workaround until attributes and metadata fields types are improved and include `url`.
          const htmlAttribute = (0, _blocks.getBlockType)(blockName).attributes[attributeName].attribute;
          if (htmlAttribute === 'src' || htmlAttribute === 'href') {
            updatedAttributes[attributeName] = null;
          } else {
            updatedAttributes[attributeName] = placeholder;
          }
        }
        if (metaValue) {
          updatedAttributes[attributeName] = metaValue;
        }
      }
    });
  }
  return (0, _react.createElement)(BlockEdit, {
    key: "edit",
    ...props,
    attributes: updatedAttributes
  });
}, 'useBoundAttributes');

/**
 * Filters a registered block's settings to enhance a block's `edit` component
 * to upgrade bound attributes.
 *
 * @param {WPBlockSettings} settings Registered block settings.
 *
 * @return {WPBlockSettings} Filtered block settings.
 */
function shimAttributeSource(settings) {
  if (!(settings.name in BLOCK_BINDINGS_ALLOWED_BLOCKS)) {
    return settings;
  }
  settings.edit = createEditFunctionWithBindingsAttribute()(settings.edit);
  return settings;
}
(0, _hooks.addFilter)('blocks.registerBlockType', 'core/editor/custom-sources-backwards-compatibility/shim-attribute-source', shimAttributeSource);

// Add the context to all blocks.
(0, _hooks.addFilter)('blocks.registerBlockType', 'core/block-bindings-ui', (settings, name) => {
  if (!(name in BLOCK_BINDINGS_ALLOWED_BLOCKS)) {
    return settings;
  }
  const contextItems = ['postId', 'postType', 'queryId'];
  const usesContextArray = settings.usesContext;
  const oldUsesContextArray = new Set(usesContextArray);
  contextItems.forEach(item => {
    if (!oldUsesContextArray.has(item)) {
      usesContextArray.push(item);
    }
  });
  settings.usesContext = usesContextArray;
  return settings;
});
//# sourceMappingURL=use-bindings-attributes.js.map