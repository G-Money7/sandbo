"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCanBlockToolbarBeFocused = useCanBlockToolbarBeFocused;
var _data = require("@wordpress/data");
var _blocks = require("@wordpress/blocks");
var _store = require("../store");
var _lockUnlock = require("../lock-unlock");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Returns true if the block toolbar should be able to receive focus.
 *
 * @return {boolean} Whether the block toolbar should be able to receive focus
 */
function useCanBlockToolbarBeFocused() {
  return (0, _data.useSelect)(select => {
    const {
      __unstableGetEditorMode,
      getBlock,
      getSettings,
      getSelectedBlockClientId,
      getFirstMultiSelectedBlockClientId
    } = (0, _lockUnlock.unlock)(select(_store.store));
    const selectedBlockId = getFirstMultiSelectedBlockClientId() || getSelectedBlockClientId();
    const isEmptyDefaultBlock = (0, _blocks.isUnmodifiedDefaultBlock)(getBlock(selectedBlockId) || {});

    // Fixed Toolbar can be focused when:
    // - a block is selected
    // - fixed toolbar is on
    // Block Toolbar Popover can be focused when:
    // - a block is selected
    // - we are in edit mode
    // - it is not an empty default block
    return !!selectedBlockId && (getSettings().hasFixedToolbar || __unstableGetEditorMode() === 'edit' && !isEmptyDefaultBlock);
  }, []);
}
//# sourceMappingURL=use-can-block-toolbar-be-focused.js.map