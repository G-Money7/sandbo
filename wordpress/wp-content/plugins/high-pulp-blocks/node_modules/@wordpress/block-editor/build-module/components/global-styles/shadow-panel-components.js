import { createElement } from "react";
/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { __experimentalVStack as VStack, __experimentalHeading as Heading, __experimentalGrid as Grid, __experimentalHStack as HStack, __experimentalDropdownContentWrapper as DropdownContentWrapper, Button, FlexItem, Dropdown } from '@wordpress/components';
import { shadow as shadowIcon, Icon, check } from '@wordpress/icons';
/**
 * External dependencies
 */
import classNames from 'classnames';
export function ShadowPopoverContainer({
  shadow,
  onShadowChange,
  settings
}) {
  const defaultShadows = settings?.shadow?.presets?.default;
  const themeShadows = settings?.shadow?.presets?.theme;
  const defaultPresetsEnabled = settings?.shadow?.defaultPresets;
  const shadows = [...(defaultPresetsEnabled ? defaultShadows : []), ...(themeShadows || [])];
  return createElement("div", {
    className: "block-editor-global-styles__shadow-popover-container"
  }, createElement(VStack, {
    spacing: 4
  }, createElement(Heading, {
    level: 5
  }, __('Drop shadow')), createElement(ShadowPresets, {
    presets: shadows,
    activeShadow: shadow,
    onSelect: onShadowChange
  })));
}
export function ShadowPresets({
  presets,
  activeShadow,
  onSelect
}) {
  return !presets ? null : createElement(Grid, {
    columns: 6,
    gap: 0,
    align: "center",
    justify: "center"
  }, presets.map(({
    name,
    slug,
    shadow
  }) => createElement(ShadowIndicator, {
    key: slug,
    label: name,
    isActive: shadow === activeShadow,
    onSelect: () => onSelect(shadow === activeShadow ? undefined : shadow),
    shadow: shadow
  })));
}
export function ShadowIndicator({
  label,
  isActive,
  onSelect,
  shadow
}) {
  return createElement("div", {
    className: "block-editor-global-styles__shadow-indicator-wrapper"
  }, createElement(Button, {
    className: "block-editor-global-styles__shadow-indicator",
    onClick: onSelect,
    label: label,
    style: {
      boxShadow: shadow
    },
    showTooltip: true
  }, isActive && createElement(Icon, {
    icon: check
  })));
}
export function ShadowPopover({
  shadow,
  onShadowChange,
  settings
}) {
  const popoverProps = {
    placement: 'left-start',
    offset: 36,
    shift: true
  };
  return createElement(Dropdown, {
    popoverProps: popoverProps,
    className: "block-editor-global-styles__shadow-dropdown",
    renderToggle: renderShadowToggle(),
    renderContent: () => createElement(DropdownContentWrapper, {
      paddingSize: "medium"
    }, createElement(ShadowPopoverContainer, {
      shadow: shadow,
      onShadowChange: onShadowChange,
      settings: settings
    }))
  });
}
function renderShadowToggle() {
  return ({
    onToggle,
    isOpen
  }) => {
    const toggleProps = {
      onClick: onToggle,
      className: classNames({
        'is-open': isOpen
      }),
      'aria-expanded': isOpen
    };
    return createElement(Button, {
      ...toggleProps
    }, createElement(HStack, {
      justify: "flex-start"
    }, createElement(Icon, {
      className: "block-editor-global-styles__toggle-icon",
      icon: shadowIcon,
      size: 24
    }), createElement(FlexItem, null, __('Drop shadow'))));
  };
}
//# sourceMappingURL=shadow-panel-components.js.map